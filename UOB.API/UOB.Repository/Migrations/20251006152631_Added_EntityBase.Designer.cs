// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UOB.Repository.EF.Context;

#nullable disable

namespace UOB.Repository.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20251006152631_Added_EntityBase")]
    partial class Added_EntityBase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UOB.Repository.EF.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c493d6b4-41f0-4e5c-bc88-687c6927b3ce"),
                            Author = "J.K. Rowling",
                            CreatedDate = new DateTime(2025, 10, 6, 15, 26, 30, 772, DateTimeKind.Utc).AddTicks(9987),
                            IsAvailable = true,
                            Title = "Harry Potter and the Philosopher's Stone"
                        },
                        new
                        {
                            Id = new Guid("a129c1ff-2b7a-46e7-bcf3-18e2ab774f6f"),
                            Author = "Chetan Bhagat",
                            CreatedDate = new DateTime(2025, 10, 6, 15, 26, 30, 773, DateTimeKind.Utc).AddTicks(3),
                            IsAvailable = true,
                            Title = "The 3 Mistakes of My Life"
                        },
                        new
                        {
                            Id = new Guid("e9a8ce3b-9c2b-4dcb-a8ce-1b4fc3b02e5b"),
                            Author = "Chetan Bhagat",
                            CreatedDate = new DateTime(2025, 10, 6, 15, 26, 30, 773, DateTimeKind.Utc).AddTicks(6),
                            IsAvailable = true,
                            Title = "Half Girlfriend"
                        },
                        new
                        {
                            Id = new Guid("8c61ed09-34ce-47ef-9635-2c1b54e098c2"),
                            Author = "Paulo Coelho",
                            CreatedDate = new DateTime(2025, 10, 6, 15, 26, 30, 773, DateTimeKind.Utc).AddTicks(8),
                            IsAvailable = true,
                            Title = "The Alchemist"
                        },
                        new
                        {
                            Id = new Guid("9d4a5683-cf70-4122-9e8c-64b4a5b22867"),
                            Author = "John Green",
                            CreatedDate = new DateTime(2025, 10, 6, 15, 26, 30, 773, DateTimeKind.Utc).AddTicks(9),
                            IsAvailable = false,
                            Title = "The Fault in Our Stars"
                        });
                });

            modelBuilder.Entity("UOB.Repository.EF.Entities.MemberRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("MemberId");

                    b.ToTable("BorrowRecords");
                });

            modelBuilder.Entity("UOB.Repository.EF.Entities.Members", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4f45b7b6-8c59-4b9a-bf55-88b9c1f08fa3"),
                            CreatedDate = new DateTime(2025, 10, 6, 15, 26, 30, 773, DateTimeKind.Utc).AddTicks(133),
                            Email = "domain@privacy.com",
                            IsActive = true,
                            Name = "UOB Domain"
                        });
                });

            modelBuilder.Entity("UOB.Repository.EF.Entities.MemberRecord", b =>
                {
                    b.HasOne("UOB.Repository.EF.Entities.Book", "Book")
                        .WithMany("MemberRecords")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UOB.Repository.EF.Entities.Members", "Member")
                        .WithMany("MemberRecords")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("UOB.Repository.EF.Entities.Book", b =>
                {
                    b.Navigation("MemberRecords");
                });

            modelBuilder.Entity("UOB.Repository.EF.Entities.Members", b =>
                {
                    b.Navigation("MemberRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
